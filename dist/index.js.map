{"version":3,"sources":["../src/index.js"],"names":["keyGen","p","q","n","totient","e","d","keyDistribution","encryption","decryption"],"mappings":";;;;;;;AAAA;;AAEA;;;AAGA,IAAMA,SAAS,SAATA,MAAS,GAAM;AACjB;AACA,QAAIC,IAAI,sBAAR;AACA,QAAIC,IAAI,sBAAR;AACA;AACA,QAAIC,IAAIF,IAAIC,CAAZ;AACA;AACA,QAAIE,UAAU,gBAAIH,IAAI,CAAR,EAAWC,IAAI,CAAf,CAAd;AACA;AACA,QAAIG,IAAI,wBAAY,CAAZ,EAAeD,OAAf,CAAR;AACA;AACA,QAAIE,IAAI,uBAAWD,CAAX,EAAcD,OAAd,CAAR;AACA,WAAO;AACHD,YADG;AAEHG;AAFG,KAAP;AAIH,CAhBD;;AAkBA,IAAMC,kBAAkB,SAAlBA,eAAkB,GAAM,CAE7B,CAFD;;AAIA,IAAMC,aAAa,SAAbA,UAAa,GAAM,CAExB,CAFD;;AAIA,IAAMC,aAAa,SAAbA,UAAa,GAAM,CAExB,CAFD;;QAKIT,M,GAAAA,M;QACAO,e,GAAAA,e;QACAC,U,GAAAA,U;QACAC,U,GAAAA,U","file":"index.js","sourcesContent":["import { getPrime, lcm, inverseMod, calcCoprime } from './utils'\n\n/**\n * https://en.wikipedia.org/wiki/RSA_(cryptosystem)\n */\nconst keyGen = () => {\n    // Choose 2 distinct prime numbers, p and q\n    let p = getPrime()\n    let q = getPrime()\n    // compute n = pq\n    let n = p * q\n    // Compute and store totient = lcm(p - 1, q - 1) \n    let totient = lcm(p - 1, q - 1)\n    // Choose an integer e, such that 1 < e < totient AND e is coprime with totient\n    let e = calcCoprime(2, totient)\n    // determine d as d = e-1 mod totient (mod multiplicative inverse of e)\n    let d = inverseMod(e, totient)\n    return {\n        n,\n        d,\n    }\n}\n\nconst keyDistribution = () => {\n\n}\n\nconst encryption = () => {\n\n}\n\nconst decryption = () => {\n\n}\n\nexport {\n    keyGen,\n    keyDistribution,\n    encryption,\n    decryption\n}"]}